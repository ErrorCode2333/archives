【1】
颜色模式
OpenGL颜色模式一共有两个：RGB（RGBA）模式和颜色表索引模式。在RGB模式下，所有的颜色定义全用R、G、B三个值来表示，有时也加上Alpha值（与透明度有关），即RGBA模式。在颜色表模式下，每一个象素的颜色是用颜色表中的某个颜色索引值表示，而这个索引值指向了相应的R、G、B值。这样的一个表成为颜色映射（Color Map）。

【2】

颜色缓冲区
         OpenGL在绘制图元时，先是在一个缓冲区中完成渲染，然后再把渲染结果交换到屏幕上。我们把这两个缓冲区称为前颜色缓冲区（屏幕）和后颜色缓冲区。在默认情况下，OpenGL命令是在后颜色缓冲区进行渲染的。当然，也可以直接在前颜色缓冲区中进行渲染。

         若要在前颜色缓冲区中进行渲染，第一种方法是直接告诉OpenGL希望在前颜色缓冲区中进行绘图，可以调用下面这个函数来实现这个目的：

         void glDrawBuffer（Glenum mode）；

         如果参数mode指定为GL_FRONT，OpenGL就会在前颜色缓冲区中进行渲染；

         如果参数mode指定为GL_BACK，那么渲染将在后颜色缓冲区中进行。


         在前颜色缓冲区进行渲染的第二种方法是在OpenGL被初始化时简单地不要求进行双缓冲区渲染。进行单缓冲区渲染时，如果希望把渲染结果实际绘制到屏幕上，需要调用glFlush（）或glFinsh（），这点非常重要。

         
         OpenGL实现除了支持单纯的前颜色缓冲区和后颜色缓冲区之外，还支持其他模式，如用于立体渲染的左和右缓冲区以及辅助缓冲区。
      

深度缓冲区
         与颜色缓冲区不同的是，深度缓冲区中所填充的是深度值而不是颜色值。

         为了启用深度缓冲区进行深度测试，只需要调用：

         glEnable（GL_DEPTH_TEST）；

         另外，即使深度缓冲区未被启用，如果深度缓冲区被创建，OpenGL也会把所有写入到颜色缓冲区的颜色片段对应的深度值写入到深度缓冲区中。但是，如果我们希望在进行深度测试时临时禁止把值写入到深度缓冲区，我们可以使用函数：

         void glDepthMask（GLboolean mask）；

         把GL_FALSE作为参数，经禁止写入深度值，但并不禁止用已经写入到深度缓冲区的值进行深度测试。

         把GL_TRUE作为参数，可以重新启用深度缓冲区的写入。同时，这也是默认的设置。

 

裁剪测试
         OpenGL允许在窗口中指定一个裁剪矩形，让渲染只在这个区域内进行。在默认情况下，裁剪矩形就是窗口的大小，不会进行裁剪测试。我们可以打开裁剪测试：

         glEnable（GL_SCISSOR_TEST）；

         在窗口内部执行渲染的那个区域称为裁剪框（scissor box），它使用下面这个函数以窗口坐标的形式指定：

         void glScissor（Glint x， Glint y， GLsizei width， GLsizei height）；// 左下原点

【3】

OPENGL坐标系可分为：世界坐标系和当前绘图坐标系。

世界坐标系以屏幕中心为原点(0, 0, 0)。你面对屏幕，你的右边是x正轴，上面是y正轴，屏幕指向你的为z正轴。长度单位这样来定： 窗口范围按此单位恰好是(-1,-1)到(1,1)。

当前绘图坐标系是 绘制物体时的坐标系。程序刚初始化时，世界坐标系和当前绘图坐标系是重合的。当用glTranslatef()，glScalef(), glRotatef()对当前绘图坐标系进行平移、伸缩、旋转变换之后， 世界坐标系和当前绘图坐标系不再重合。改变以后，再用glVertex3f()等绘图函数绘图时，都是在当前绘图坐标系进行绘图，所有的函数参数也都是相 对当前绘图坐标系来讲的。


屏幕坐标系：左下角为原点。？

【4】
坐标系旋转：
进行旋转操作时需要指定的角度θ的方向则由右手法则来决定，即右手握拳，大拇指直
向某个坐标轴的正方向，那么其余四指指向的方向即为该坐标轴上的θ角的正方向（即θ
角增加的方向）

【5】
在实际编程中，为了保存几何变换和投影变换的操作，
OpenGL维护两个栈，
即投影变换栈和几何变换栈。
栈中保存的元素即为投影变换和几何变换的变换矩阵。使用下面的函数可以在两个栈之间进行切换：
  
切换当前操作的栈为投影变换栈：
glMatrixMode(GL_PROJECTION); 
切换当前操作的栈为几何变换栈：
glMatrixMode(GL_MODELVIEW);  
此外，下面的函数可以清除当前操作的栈中的内容，并向栈中压入一个单位矩阵：
 
glLoadIdentity();

屏幕坐标系投影坐标 = 投影矩阵X变换矩阵X世界坐标

【6】

glPushMatrix(); 
// 
保存当前坐标系
 
glPopMatrix();  
// 
恢复当前坐标系
  
在调用几何变换操作时，
OpenGL将该几何变换操作的变换矩阵与当前栈的栈顶元素相乘（！左乘），得到一个新 
的矩阵并将其作为几何变换栈的栈顶。

例子：
glMatrixMode(GL_PROJECTION); 
glLoadIdentity();  
gluPerspective(30.0, aspect, 1.0, 50.0); 
glMatrixMode(GL_MODELVIEW); 
glPushMatrix();  
glTranslatef(0.0, 0.0, -20.0); 
glPushMatrix();  
glTranslatef(0.0, 1.0, 0.0); 
myWireCylinder(1.0, 2.0, 12); 
glTranslatef(0.0, 1.0, 0.0); 
glRotatef(-90.0, 1.0, 0.0, 0.0); 
glutWireCone(1.0, 2.0, 12, 3); 
glPopMatrix();  
glTranslatef(0.0, -1.0, 0.0); 
myWireCylinder(1.0, 2.0, 12); 
glPopMatrix();

【7】投影
1 正射投影(Orthographic Projection)
正射投影，又叫平行投影。这种投影的视景体是一个矩形的平行管道，也就是一个长方体，如图所示。正射投影的最大一个特点是无论物体距离相机多远，投影后的物体大小尺寸不变。这种投影通常用在建筑蓝图绘制和计算机辅助设计等方面，这些行业要求投影后的物体尺寸及相互间的角度不变，以便施工或制造时物体比例大小正确。

此种模式下，不需要设定照相机位置、方向以及视点的位置，也就是说不需要gluLookAt函数。

    OpenGL正射投影函数共有两个。

    一个函数是：

void glOrtho(GLdouble left,GLdouble right,GLdouble bottom,GLdouble top, GLdouble near,GLdouble far)

它创建一个平行视景体。实际上这个函数的操作是创建一个正射投影矩阵，并且用这个矩阵乘以当前矩阵。其中近裁剪平面是一个矩形，矩形左下角点三维空间坐标是(left,bottom,-near)，右上角点是(right,top,-near)；远裁剪平面也是一个矩形，左下角点空间坐标是(left,bottom,-far)，右上角点是(right,top,-far)。所有的near和far值同时为正或同时为负。如果没有其他变换，正射投影的方向平行于Z轴，且视点朝向Z负轴。这意味着物体在视点前面时far和near都为负值，物体在视点后面时far和near都为正值。

2 透视投影(Perspective Projection)

透视投影符合人们心理习惯，即离视点近的物体大，离视点远的物体小，远到极点即为消失，成为灭点。它的视景体类似于一个顶部和底部都被切除掉的棱椎，也就是棱台。这个投影通常用于动画、视觉仿真以及其它许多具有真实性反映的方面。OpenGL透视投影函数也有两个，其中函数glFrustum()。

此种情况下，需要用gluLookAt设定照相机位置、照相机方向(一般设置为(0,1,0))、以及视点位置。

    这个函数原型为：

void glFrustum(GLdouble left,GLdouble Right,GLdouble bottom,GLdouble top, GLdouble near,GLdouble far);

它创建一个透视视景体。其操作是创建一个透视投影矩阵，并且用这个矩阵乘以当前矩阵。这个函数的参数只定义近裁剪平面的左下角点和右上角点的三维空间坐标，即(left,bottom,-near)和(right,top,-near)；最后一个参数far是远裁剪平面的Z负值，其左下角点和右上角点空间坐标由函数根据透视投影原理自动生成。near和far表示离视点的远近，它们总为正值。

    另一个函数是：

void gluPerspective(GLdouble fovy,GLdouble aspect,GLdouble zNear, GLdouble zFar);

它也创建一个对称透视视景体，但它的参数定义于前面的不同，如图所示。其操作是创建一个对称的透视投影矩阵，并且用这个矩阵乘以当前矩阵。参数fovy定义视野在X-Z平面的角度，范围是[0.0,180.0]；参数aspect是投影平面宽度与高度的比率；参数zNear和Far分别是远近裁剪面到眼睛的距离，它们总为正值。

////////////////////////
透视投影的聚焦点，在观察坐标系的原点（也就是我们gluLooKAt的指定的观察点），观察平面就在近平面这里，也就是zNear指定的地方，　观察平面是平行于观察坐标系的（Ｘ，Ｙ），因此我们指定ｚ轴，也就指定它的位置．　

void gluLookAt(GLdouble eyex,GLdouble eyey,GLdouble eyez,
                                   GLdouble centerx,GLdouble centery,GLdouble centerz,
                                   GLdouble upx,GLdouble upy,GLdouble upz);
该函数定义一个视图矩阵，并与当前矩阵相乘。
第一组eyex, eyey,eyez 相机在世界坐标的位置
第二组centerx,centery,centerz 相机镜头对准的物体在世界坐标的位置
第三组upx,upy,upz 相机向上的方向在世界坐标中的方向
你把相机想象成为你自己的脑袋：
第一组数据就是脑袋的位置
第二组数据就是眼睛看的物体的位置
第三组就是头顶朝向的方向（因为你可以歪着头看同一个物体）。


/**************************************************************/
视口就是窗口内部用于绘制裁剪区域的客户端区域。视口简单的将裁剪区域映射到窗口中的一个区域。


/**************************************************************/
纹理 :
计算机图形学中，纹理指的是一张表示物体表面细节的位图。